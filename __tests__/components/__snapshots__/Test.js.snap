// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test component component mounted should render correct 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "testKey",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "testKey",
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Test
      drawer={
        Object {
          "clearZones": [MockFunction],
          "getZones": [MockFunction],
          "reset": [MockFunction],
          "start": [MockFunction],
        }
      }
      getData={
        [MockFunction] {
          "calls": Array [
            Array [
              "settings",
            ],
            Array [
              "tests",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": Promise {},
            },
            Object {
              "isThrow": false,
              "value": Promise {},
            },
          ],
        }
      }
      prepareCanvas={[MockFunction]}
    >
      <div
        className="container"
      >
        <div
          className="userArea"
        >
          <withRouter(User)
            handleChange={[Function]}
            handleSubmit={[Function]}
          >
            <Route>
              <User
                handleChange={[Function]}
                handleSubmit={[Function]}
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "key": "testKey",
                        "pathname": "/",
                        "search": "",
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "key": "testKey",
                      "pathname": "/",
                      "search": "",
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "key": "testKey",
                    "pathname": "/",
                    "search": "",
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
              >
                <div>
                  <div
                    className="paranja"
                  />
                  <div
                    className="userLoginArea"
                  >
                    <form
                      className="userLogin"
                      onSubmit={[Function]}
                    >
                      <div>
                        <span>
                          <label>
                            Ваше имя:  
                            <input
                              id="user"
                              onChange={[Function]}
                              required={true}
                              type="text"
                            />
                          </label>
                        </span>
                        <span>
                          <input
                            type="submit"
                            value="Начать тест"
                          />
                        </span>
                      </div>
                    </form>
                  </div>
                </div>
              </User>
            </Route>
          </withRouter(User)>
        </div>
      </div>
    </Test>
  </Router>
</MemoryRouter>
`;

exports[`Test component test finished should render correct 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "testKey",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "testKey",
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Test
      drawer={
        Object {
          "clearZones": [MockFunction],
          "getZones": [MockFunction],
          "reset": [MockFunction],
          "start": [MockFunction],
        }
      }
      getData={[MockFunction]}
      prepareCanvas={
        [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        }
      }
    >
      <div
        className="container"
      >
        <div
          className="resultArea"
        >
          <div>
            <h2>
              Ваш результат:
              <span
                className="perfect"
              >
                 
                100
                %
              </span>
            </h2>
          </div>
          <div>
            <a
              onClick={[Function]}
            >
              Показать ответы
            </a>
          </div>
        </div>
      </div>
    </Test>
  </Router>
</MemoryRouter>
`;

exports[`Test component test started should render correct 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "testKey",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "testKey",
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Test
      drawer={
        Object {
          "clearZones": [MockFunction],
          "getZones": [MockFunction],
          "reset": [MockFunction],
          "start": [MockFunction],
        }
      }
      getData={[MockFunction]}
      prepareCanvas={
        [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        }
      }
    >
      <div
        className="container"
      >
        <div
          className="userArea"
        >
          <withRouter(User)
            handleChange={[Function]}
            handleSubmit={[Function]}
          >
            <Route>
              <User
                handleChange={[Function]}
                handleSubmit={[Function]}
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "key": "testKey",
                        "pathname": "/",
                        "search": "",
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "key": "testKey",
                      "pathname": "/",
                      "search": "",
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "key": "testKey",
                    "pathname": "/",
                    "search": "",
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
              >
                <div>
                  <div
                    className="paranja"
                  />
                  <div
                    className="userLoginArea"
                  >
                    <form
                      className="userLogin"
                      onSubmit={[Function]}
                    >
                      <div>
                        <span>
                          <label>
                            Ваше имя:  
                            <input
                              id="user"
                              onChange={[Function]}
                              required={true}
                              type="text"
                            />
                          </label>
                        </span>
                        <span>
                          <input
                            type="submit"
                            value="Начать тест"
                          />
                        </span>
                      </div>
                    </form>
                  </div>
                </div>
              </User>
            </Route>
          </withRouter(User)>
        </div>
      </div>
    </Test>
  </Router>
</MemoryRouter>
`;
